#include <iostream>


using namespace std;
struct Header;

struct Cell {
    int row, col, value;
    Cell *nextRow;
    Cell *nextCol;
    Header *originRow;
    Header *originCol;

    Cell(int r, int c, int v) : row(r), col(c), value(v), nextRow(nullptr),
                                nextCol(nullptr), originRow(nullptr), originCol(nullptr) {}
};

struct Header {
    int index;
    Cell *next; // puntero al primer nodo
    Header *nextHeader;

    Header(int i) : index(i), next(nullptr), nextHeader(nullptr) {}
};


class SparseMatrix {
private:
    Header *rowHead;
    Header *colHead;
    int rows, cols;

// Buscar o crear cabecera para filas
    Header *getOrCreateRowHeader(int row) {
        Header *prev = nullptr;
        Header *curr = rowHead;
        while (curr && curr->index < row) {
            prev = curr;
            curr = curr->nextHeader;
        }
        if (!curr || curr->index != row) {
            Header *newHeader = new Header(row);
            if (prev) {
                prev->nextHeader = newHeader;
            } else {
                rowHead = newHeader;
            }
            newHeader->nextHeader = curr;
            return newHeader;
        }
        return curr;
    }

// Buscar o crear cabecera para columnas
    Header *getOrCreateColHeader(int col) {
        Header *prev = nullptr;
        Header *curr = colHead;
        while (curr && curr->index < col) {
            prev = curr;
            curr = curr->nextHeader;
        }
        if (!curr || curr->index != col) {
            Header *newHeader = new Header(col);
            if (prev) {
                prev->nextHeader = newHeader;
            } else {
                colHead = newHeader;
            }
            newHeader->nextHeader = curr;
            return newHeader;
        }
        return curr;
    }

public:
    SparseMatrix(int r, int c) : rowHead(nullptr), colHead(nullptr), rows(r),
                                 cols(c) {}

    void insert(int row, int col, int value) {
        if (row < 0 || row >= rows || col < 0 || col >= cols || value == 0) return;
        Header *rowHeader = getOrCreateRowHeader(row);
        Header *colHeader = getOrCreateColHeader(col);
        Cell *newCell = new Cell(row, col, value);
// Insertar en la fila
        Cell *rowPrev = nullptr;
        Cell *rowCurr = rowHeader->next;
        while (rowCurr && rowCurr->col < col) {
            rowPrev = rowCurr;
            rowCurr = rowCurr->nextRow;
        }
        if (rowPrev) {
            rowPrev->nextRow = newCell;
            rowPrev->originRow = nullptr;
        } else {
            rowHeader->next = newCell;
        }
        newCell->nextRow = rowCurr;

        if (!newCell->nextRow) {
            newCell->originRow = rowHeader;
        }
// Insertar en la columna
        Cell *colPrev = nullptr;
        Cell *colCurr = colHeader->next;
        while (colCurr && colCurr->row < row) {
            colPrev = colCurr;
            colCurr = colCurr->nextCol;
        }
        if (colPrev) {
            colPrev->nextCol = newCell;
            colPrev->originCol = nullptr;
        } else {
            colHeader->next = newCell;
        }
        newCell->nextCol = colCurr;

        if (!newCell->nextCol) {
            newCell->originCol = colHeader;
        }
    }

    SparseMatrix operator+(SparseMatrix &other) {
        SparseMatrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            Header *rowHeader1 = getOrCreateRowHeader(i);
            Header *rowHeader2 = other.getOrCreateRowHeader(i);
            Cell *rowCell1 = rowHeader1->next;
            Cell *rowCell2 = rowHeader2->next;
            for (int j = 0; j < cols; ++j) {
                if (rowCell1 && rowCell2) {
                    if (rowCell1->col == rowCell2->col) {
                        result.insert(i, rowCell1->col, (rowCell1->value + rowCell2->value));
                        rowCell1 = rowCell1->nextRow;
                        rowCell2 = rowCell2->nextRow;
                    }
                    else if (rowCell1->col < rowCell2->col) {
                        result.insert(i, rowCell1->col, rowCell1->value);
                        rowCell1=rowCell1->nextRow;
                    }
                    else if (rowCell1->col > rowCell2->col) {
                        result.insert(i, rowCell2->col, rowCell2->value);
                        rowCell2=rowCell2->nextRow;
                    }
                }
            }
        }
        return result;
    }


// Mostrar la matriz
    void display() {
        for (int i = 0; i < rows; ++i) {
            Header *rowHeader = getOrCreateRowHeader(i);
            Cell *cell = rowHeader->next;
            for (int j = 0; j < cols; ++j) {
                if (cell && cell->col == j) {
                    cout << cell->value << " ";
                    cell = cell->nextRow;
                } else {
                    cout << "0 ";
                }
            }
            cout << endl;
        }
    }

    ~SparseMatrix() {
        Header *rowCurr = rowHead;
        while (rowCurr) {
            Cell *cellCurr = rowCurr->next;
            while (cellCurr) {
                Cell *toDelete = cellCurr;
                cellCurr = cellCurr->nextRow;
                delete toDelete;
            }
            Header *toDelete = rowCurr;
            rowCurr = rowCurr->nextHeader;
            delete toDelete;
        }
        Header *colCurr = colHead;
        while (colCurr) {
            Header *toDelete = colCurr;
            colCurr = colCurr->nextHeader;
            delete toDelete;
        }
    }
};

int main() {
    SparseMatrix M1(9, 9);
    SparseMatrix M2(9, 9);
    M1.insert(2, 3, 3);
    M1.insert(5, 1, 3);
    M1.insert(5, 4, 1);
    M1.insert(7, 4, 5);
    M1.insert(8, 1, 1);
    M1.insert(8, 6, 4);
    M1.insert(9, 3, 2);

    M2.insert(2, 3, 3);
    M2.insert(2, 1, 3);
    M2.insert(5, 4, 1);
    M2.insert(7, 4, 5);
    M2.insert(5, 1, 1);
    M2.insert(8, 6, 4);
    M2.insert(9, 3, 2);
    cout << "Matriz 1:" << endl;
    M1.display();
    cout << "Matriz 2:" << endl;
    M2.display();
    cout << "Matriz resultado:" << endl;
    SparseMatrix M = M1 + M2;
    M.display();
    return 0;
}
